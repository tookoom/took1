///////////////////////////////////////////////////////////
//  ErrorManager.cs
//  Implementation of the Class ErrorManager
//  Generated by Enterprise Architect
//  Created on:      06-out-2008 17:09:12
//  Original author: andre
///////////////////////////////////////////////////////////




using Took1.Silverlight.Diagnostics;
using System;
namespace Took1.Silverlight.Diagnostics
{
	public class ErrorManager {
        #region EVENT
        public delegate void LogEntryWrittenEventHandler(Object sender, ErrorManagerEventArgs e);
        public event LogEntryWrittenEventHandler LogEntryWritten;

        #endregion
        #region PRIVATE MEMBERS
        private string errorMessage = "";
        private bool hasError = false;
        
        #endregion
        #region PUBLIC PROPERTIES
        /// <summary>
        /// Mensagem de erro
        /// </summary>
        public string ErrorMessage
        {
            get { return errorMessage; }
            set { errorMessage = value; }
        }
        /// <summary>
        /// Indica se erro foi setado
        /// </summary>
        public bool HasError
        {
            //read property
            get { return hasError; }
        }
        /// <summary>
        /// Nome do source do Log de Eventos do sistema.
        /// </summary>
        public string LogSource
        {
            get;
            set;
        }
        
        #endregion

		/// 
		/// <param name="logSourceName"></param>
		public ErrorManager(string logSourceName){
            if (logSourceName != "")
                LogSource = logSourceName;
            else LogSource = null;
		}

		public ErrorManager(){
            LogSource = null;
		}

		/// 
		/// <param name="e"></param>
		public virtual void OnLogEntryWritten(ErrorManagerEventArgs e){
            LogEntryWrittenEventHandler handler = LogEntryWritten;
            if (handler != null)
            {
                // Invokes the delegates. 
                handler(this, e);
            }
		}

		/// <summary>
		/// Reseta erro
		/// </summary>
		public void Reset(){
            errorMessage = "";
            hasError = false;

		}

		/// <summary>
		/// Seta erro
		/// </summary>
		/// <param name="localisation"></param>
		/// <param name="errorMessage"></param>
		public void SetError(string localisation, string errorMessage){
            ErrorMessage = string.Format("Exception in {0}: {1}", localisation, errorMessage);
            hasError = true;
		}


		/// <summary>
		/// SetaErro
		/// </summary>
		/// <param name="localisation"></param>
		/// <param name="exception"></param>
		public void SetError(string localisation, Exception exception){
            errorMessage = string.Format("Exception in {0}: {1}", localisation, exception);
            hasError = true;
        }

		public void LogError(){
            if (LogSource != null)
            {
                //EventLog.WriteEntry(LogSource, errorMessage);
                OnLogEntryWritten(new ErrorManagerEventArgs()
                {
                    EntryType = EventLogEntryType.Error,
                    Message = errorMessage,
                    Source = LogSource
                });
            }
		}

	}//end ErrorManager

}//end namespace Diagnostics
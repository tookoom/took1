///////////////////////////////////////////////////////////
//  ErrorManager.cs
//  Implementation of the Class ErrorManager
//  Generated by Enterprise Architect
//  Created on:      06-out-2008 17:09:12
//  Original author: andre
///////////////////////////////////////////////////////////




using TK1.Diagnostics;
using System;
namespace TK1.Diagnostics {
    /// <summary>
    /// Gerenciador de Erros
    /// </summary>
    public class ErrorManager
    {
        #region EVENT
        /// <summary>
        /// Delegate do evento LogEntryWritten
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        public delegate void LogEntryWrittenEventHandler(Object sender, ErrorManagerEventArgs e);
        /// <summary>
        /// Evento disparado quando erro é logado
        /// </summary>
        public event LogEntryWrittenEventHandler LogEntryWritten;

        #endregion
        #region PRIVATE MEMBERS
        private string errorMessage = "";
        private bool hasError = false;

        #endregion
        #region PUBLIC PROPERTIES
        /// <summary>
        /// Mensagem de erro
        /// </summary>
        public string ErrorMessage
        {
            get { return errorMessage; }
            set { errorMessage = value; }
        }
        /// <summary>
        /// Indica se erro foi setado
        /// </summary>
        public bool HasError
        {
            //read property
            get { return hasError; }
        }
        /// <summary>
        /// Nome do source do Log de Eventos do sistema.
        /// </summary>
        public string EventLogSource
        {
            get;
            set;
        }

        #endregion

        /// <summary>
        /// Construtor
        /// </summary>
        /// <param name="logSourceName"></param>
        public ErrorManager(string logSourceName)
        {
            if (logSourceName != "")
                EventLogSource = logSourceName;
            else EventLogSource = null;
        }

        /// <summary>
        /// Construtor
        /// </summary>
        public ErrorManager()
        {
            EventLogSource = null;
        }

        /// <summary>
        /// Dispara evento LogEntryWritten
        /// </summary>
        /// <param name="e"></param>
        public virtual void OnLogEntryWritten(ErrorManagerEventArgs e)
        {
            LogEntryWrittenEventHandler handler = LogEntryWritten;
            if (handler != null)
            {
                // Invokes the delegates. 
                handler(this, e);
            }
        }

        /// <summary>
        /// Reseta erro
        /// </summary>
        public void Reset()
        {
            errorMessage = "";
            hasError = false;

        }

        /// <summary>
        /// Seta erro
        /// </summary>
        /// <param name="localisation"></param>
        /// <param name="errorMessage"></param>
        public void SetError(string localisation, string errorMessage)
        {
            ErrorMessage = string.Format("Exception in {0}: {1}", localisation, errorMessage);
            hasError = true;
        }


        /// <summary>
        /// SetaErro
        /// </summary>
        /// <param name="localisation"></param>
        /// <param name="exception"></param>
        public void SetError(string localisation, Exception exception)
        {
            errorMessage = string.Format("Exception in {0}: {1}", localisation, exception);
            hasError = true;
        }

        /// <summary>
        /// Grava erro no log de eventos do sistema
        /// </summary>
        public void LogError()
        {
            if (EventLogSource != null)
            {
                EventLog.WriteEntry(EventLogSource, errorMessage);
                OnLogEntryWritten(new ErrorManagerEventArgs()
                {
                    EntryType = EventLogEntryType.Error,
                    Message = errorMessage,
                    Source = EventLogSource
                });
            }
        }

    }//end ErrorManager

}//end namespace Diagnostics
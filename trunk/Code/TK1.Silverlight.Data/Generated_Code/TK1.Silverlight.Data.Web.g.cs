//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17929
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TK1.Bizz.Data
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Runtime.Serialization;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.Xml.Serialization;
    
    
    /// <summary>
    /// The 'SiteAd' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TK1.Bizz.Data")]
    public sealed partial class SiteAd : Entity
    {
        
        private string _address;
        
        private string _areaDescription;
        
        private string _categoryName;
        
        private string _cityName;
        
        private Nullable<double> _cityTaxes;
        
        private string _condoDescription;
        
        private Nullable<double> _condoTaxes;
        
        private string _customerCodename;
        
        private string _districtName;
        
        private double _externalArea;
        
        private bool _featuredAd;
        
        private string _fullDescription;
        
        private string _imageUrl;
        
        private double _internalArea;
        
        private string _shortDescription;
        
        private EntityCollection<SiteAdDetail> _siteAdDetails;
        
        private int _siteAdID;
        
        private EntityCollection<SiteAdPic> _siteAdPics;
        
        private EntityRef<SiteAdStatu> _siteAdStatu;
        
        private int _siteAdStatusID;
        
        private EntityRef<SiteAdType> _siteAdType;
        
        private int _siteAdTypeID;
        
        private string _siteTypeName;
        
        private string _title;
        
        private double _totalArea;
        
        private int _totalRooms;
        
        private double _value;
        
        private bool _visible;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnAddressChanging(string value);
        partial void OnAddressChanged();
        partial void OnAreaDescriptionChanging(string value);
        partial void OnAreaDescriptionChanged();
        partial void OnCategoryNameChanging(string value);
        partial void OnCategoryNameChanged();
        partial void OnCityNameChanging(string value);
        partial void OnCityNameChanged();
        partial void OnCityTaxesChanging(Nullable<double> value);
        partial void OnCityTaxesChanged();
        partial void OnCondoDescriptionChanging(string value);
        partial void OnCondoDescriptionChanged();
        partial void OnCondoTaxesChanging(Nullable<double> value);
        partial void OnCondoTaxesChanged();
        partial void OnCustomerCodenameChanging(string value);
        partial void OnCustomerCodenameChanged();
        partial void OnDistrictNameChanging(string value);
        partial void OnDistrictNameChanged();
        partial void OnExternalAreaChanging(double value);
        partial void OnExternalAreaChanged();
        partial void OnFeaturedAdChanging(bool value);
        partial void OnFeaturedAdChanged();
        partial void OnFullDescriptionChanging(string value);
        partial void OnFullDescriptionChanged();
        partial void OnImageUrlChanging(string value);
        partial void OnImageUrlChanged();
        partial void OnInternalAreaChanging(double value);
        partial void OnInternalAreaChanged();
        partial void OnShortDescriptionChanging(string value);
        partial void OnShortDescriptionChanged();
        partial void OnSiteAdIDChanging(int value);
        partial void OnSiteAdIDChanged();
        partial void OnSiteAdStatusIDChanging(int value);
        partial void OnSiteAdStatusIDChanged();
        partial void OnSiteAdTypeIDChanging(int value);
        partial void OnSiteAdTypeIDChanged();
        partial void OnSiteTypeNameChanging(string value);
        partial void OnSiteTypeNameChanged();
        partial void OnTitleChanging(string value);
        partial void OnTitleChanged();
        partial void OnTotalAreaChanging(double value);
        partial void OnTotalAreaChanged();
        partial void OnTotalRoomsChanging(int value);
        partial void OnTotalRoomsChanged();
        partial void OnValueChanging(double value);
        partial void OnValueChanged();
        partial void OnVisibleChanging(bool value);
        partial void OnVisibleChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAd"/> class.
        /// </summary>
        public SiteAd()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Address' value.
        /// </summary>
        [DataMember()]
        public string Address
        {
            get
            {
                return this._address;
            }
            set
            {
                if ((this._address != value))
                {
                    this.OnAddressChanging(value);
                    this.RaiseDataMemberChanging("Address");
                    this.ValidateProperty("Address", value);
                    this._address = value;
                    this.RaiseDataMemberChanged("Address");
                    this.OnAddressChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'AreaDescription' value.
        /// </summary>
        [DataMember()]
        public string AreaDescription
        {
            get
            {
                return this._areaDescription;
            }
            set
            {
                if ((this._areaDescription != value))
                {
                    this.OnAreaDescriptionChanging(value);
                    this.RaiseDataMemberChanging("AreaDescription");
                    this.ValidateProperty("AreaDescription", value);
                    this._areaDescription = value;
                    this.RaiseDataMemberChanged("AreaDescription");
                    this.OnAreaDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CategoryName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string CategoryName
        {
            get
            {
                return this._categoryName;
            }
            set
            {
                if ((this._categoryName != value))
                {
                    this.OnCategoryNameChanging(value);
                    this.RaiseDataMemberChanging("CategoryName");
                    this.ValidateProperty("CategoryName", value);
                    this._categoryName = value;
                    this.RaiseDataMemberChanged("CategoryName");
                    this.OnCategoryNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CityName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(32)]
        public string CityName
        {
            get
            {
                return this._cityName;
            }
            set
            {
                if ((this._cityName != value))
                {
                    this.OnCityNameChanging(value);
                    this.RaiseDataMemberChanging("CityName");
                    this.ValidateProperty("CityName", value);
                    this._cityName = value;
                    this.RaiseDataMemberChanged("CityName");
                    this.OnCityNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CityTaxes' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> CityTaxes
        {
            get
            {
                return this._cityTaxes;
            }
            set
            {
                if ((this._cityTaxes != value))
                {
                    this.OnCityTaxesChanging(value);
                    this.RaiseDataMemberChanging("CityTaxes");
                    this.ValidateProperty("CityTaxes", value);
                    this._cityTaxes = value;
                    this.RaiseDataMemberChanged("CityTaxes");
                    this.OnCityTaxesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CondoDescription' value.
        /// </summary>
        [DataMember()]
        public string CondoDescription
        {
            get
            {
                return this._condoDescription;
            }
            set
            {
                if ((this._condoDescription != value))
                {
                    this.OnCondoDescriptionChanging(value);
                    this.RaiseDataMemberChanging("CondoDescription");
                    this.ValidateProperty("CondoDescription", value);
                    this._condoDescription = value;
                    this.RaiseDataMemberChanged("CondoDescription");
                    this.OnCondoDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CondoTaxes' value.
        /// </summary>
        [DataMember()]
        public Nullable<double> CondoTaxes
        {
            get
            {
                return this._condoTaxes;
            }
            set
            {
                if ((this._condoTaxes != value))
                {
                    this.OnCondoTaxesChanging(value);
                    this.RaiseDataMemberChanging("CondoTaxes");
                    this.ValidateProperty("CondoTaxes", value);
                    this._condoTaxes = value;
                    this.RaiseDataMemberChanged("CondoTaxes");
                    this.OnCondoTaxesChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerCodename' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string CustomerCodename
        {
            get
            {
                return this._customerCodename;
            }
            set
            {
                if ((this._customerCodename != value))
                {
                    this.OnCustomerCodenameChanging(value);
                    this.RaiseDataMemberChanging("CustomerCodename");
                    this.ValidateProperty("CustomerCodename", value);
                    this._customerCodename = value;
                    this.RaiseDataMemberChanged("CustomerCodename");
                    this.OnCustomerCodenameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'DistrictName' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(64)]
        public string DistrictName
        {
            get
            {
                return this._districtName;
            }
            set
            {
                if ((this._districtName != value))
                {
                    this.OnDistrictNameChanging(value);
                    this.RaiseDataMemberChanging("DistrictName");
                    this.ValidateProperty("DistrictName", value);
                    this._districtName = value;
                    this.RaiseDataMemberChanged("DistrictName");
                    this.OnDistrictNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ExternalArea' value.
        /// </summary>
        [DataMember()]
        public double ExternalArea
        {
            get
            {
                return this._externalArea;
            }
            set
            {
                if ((this._externalArea != value))
                {
                    this.OnExternalAreaChanging(value);
                    this.RaiseDataMemberChanging("ExternalArea");
                    this.ValidateProperty("ExternalArea", value);
                    this._externalArea = value;
                    this.RaiseDataMemberChanged("ExternalArea");
                    this.OnExternalAreaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FeaturedAd' value.
        /// </summary>
        [DataMember()]
        public bool FeaturedAd
        {
            get
            {
                return this._featuredAd;
            }
            set
            {
                if ((this._featuredAd != value))
                {
                    this.OnFeaturedAdChanging(value);
                    this.RaiseDataMemberChanging("FeaturedAd");
                    this.ValidateProperty("FeaturedAd", value);
                    this._featuredAd = value;
                    this.RaiseDataMemberChanged("FeaturedAd");
                    this.OnFeaturedAdChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FullDescription' value.
        /// </summary>
        [DataMember()]
        public string FullDescription
        {
            get
            {
                return this._fullDescription;
            }
            set
            {
                if ((this._fullDescription != value))
                {
                    this.OnFullDescriptionChanging(value);
                    this.RaiseDataMemberChanging("FullDescription");
                    this.ValidateProperty("FullDescription", value);
                    this._fullDescription = value;
                    this.RaiseDataMemberChanged("FullDescription");
                    this.OnFullDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ImageUrl' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string ImageUrl
        {
            get
            {
                return this._imageUrl;
            }
            set
            {
                if ((this._imageUrl != value))
                {
                    this.OnImageUrlChanging(value);
                    this.RaiseDataMemberChanging("ImageUrl");
                    this.ValidateProperty("ImageUrl", value);
                    this._imageUrl = value;
                    this.RaiseDataMemberChanged("ImageUrl");
                    this.OnImageUrlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'InternalArea' value.
        /// </summary>
        [DataMember()]
        public double InternalArea
        {
            get
            {
                return this._internalArea;
            }
            set
            {
                if ((this._internalArea != value))
                {
                    this.OnInternalAreaChanging(value);
                    this.RaiseDataMemberChanging("InternalArea");
                    this.ValidateProperty("InternalArea", value);
                    this._internalArea = value;
                    this.RaiseDataMemberChanged("InternalArea");
                    this.OnInternalAreaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ShortDescription' value.
        /// </summary>
        [DataMember()]
        public string ShortDescription
        {
            get
            {
                return this._shortDescription;
            }
            set
            {
                if ((this._shortDescription != value))
                {
                    this.OnShortDescriptionChanging(value);
                    this.RaiseDataMemberChanging("ShortDescription");
                    this.ValidateProperty("ShortDescription", value);
                    this._shortDescription = value;
                    this.RaiseDataMemberChanged("ShortDescription");
                    this.OnShortDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SiteAdDetail"/> entity instances.
        /// </summary>
        [Association("SiteAd_SiteAdDetail", "SiteAdID,SiteAdTypeID,CustomerCodename", "SiteAdID,SiteAdTypeID,CustomerCodename")]
        [XmlIgnore()]
        public EntityCollection<SiteAdDetail> SiteAdDetails
        {
            get
            {
                if ((this._siteAdDetails == null))
                {
                    this._siteAdDetails = new EntityCollection<SiteAdDetail>(this, "SiteAdDetails", this.FilterSiteAdDetails, this.AttachSiteAdDetails, this.DetachSiteAdDetails);
                }
                return this._siteAdDetails;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int SiteAdID
        {
            get
            {
                return this._siteAdID;
            }
            set
            {
                if ((this._siteAdID != value))
                {
                    this.OnSiteAdIDChanging(value);
                    this.RaiseDataMemberChanging("SiteAdID");
                    this.ValidateProperty("SiteAdID", value);
                    this._siteAdID = value;
                    this.RaiseDataMemberChanged("SiteAdID");
                    this.OnSiteAdIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SiteAdPic"/> entity instances.
        /// </summary>
        [Association("SiteAd_SiteAdPic", "SiteAdID,SiteAdTypeID,CustomerCodename", "SiteAdID,SiteAdTypeID,CustomerCodename")]
        [XmlIgnore()]
        public EntityCollection<SiteAdPic> SiteAdPics
        {
            get
            {
                if ((this._siteAdPics == null))
                {
                    this._siteAdPics = new EntityCollection<SiteAdPic>(this, "SiteAdPics", this.FilterSiteAdPics, this.AttachSiteAdPics, this.DetachSiteAdPics);
                }
                return this._siteAdPics;
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SiteAdStatu"/> entity.
        /// </summary>
        [Association("SiteAdStatu_SiteAd", "SiteAdStatusID", "SiteAdStatusID", IsForeignKey=true)]
        [XmlIgnore()]
        public SiteAdStatu SiteAdStatu
        {
            get
            {
                if ((this._siteAdStatu == null))
                {
                    this._siteAdStatu = new EntityRef<SiteAdStatu>(this, "SiteAdStatu", this.FilterSiteAdStatu);
                }
                return this._siteAdStatu.Entity;
            }
            set
            {
                SiteAdStatu previous = this.SiteAdStatu;
                if ((previous != value))
                {
                    this.ValidateProperty("SiteAdStatu", value);
                    if ((previous != null))
                    {
                        this._siteAdStatu.Entity = null;
                        previous.SiteAds.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SiteAdStatusID = value.SiteAdStatusID;
                    }
                    else
                    {
                        this.SiteAdStatusID = default(int);
                    }
                    this._siteAdStatu.Entity = value;
                    if ((value != null))
                    {
                        value.SiteAds.Add(this);
                    }
                    this.RaisePropertyChanged("SiteAdStatu");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdStatusID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SiteAdStatusID
        {
            get
            {
                return this._siteAdStatusID;
            }
            set
            {
                if ((this._siteAdStatusID != value))
                {
                    this.OnSiteAdStatusIDChanging(value);
                    this.RaiseDataMemberChanging("SiteAdStatusID");
                    this.ValidateProperty("SiteAdStatusID", value);
                    this._siteAdStatusID = value;
                    this.RaiseDataMemberChanged("SiteAdStatusID");
                    this.OnSiteAdStatusIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SiteAdType"/> entity.
        /// </summary>
        [Association("SiteAdType_SiteAd", "SiteAdTypeID", "SiteAdTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public SiteAdType SiteAdType
        {
            get
            {
                if ((this._siteAdType == null))
                {
                    this._siteAdType = new EntityRef<SiteAdType>(this, "SiteAdType", this.FilterSiteAdType);
                }
                return this._siteAdType.Entity;
            }
            set
            {
                SiteAdType previous = this.SiteAdType;
                if ((previous != value))
                {
                    this.ValidateProperty("SiteAdType", value);
                    if ((previous != null))
                    {
                        this._siteAdType.Entity = null;
                        previous.SiteAds.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SiteAdTypeID = value.SiteAdTypeID;
                    }
                    else
                    {
                        this.SiteAdTypeID = default(int);
                    }
                    this._siteAdType.Entity = value;
                    if ((value != null))
                    {
                        value.SiteAds.Add(this);
                    }
                    this.RaisePropertyChanged("SiteAdType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdTypeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int SiteAdTypeID
        {
            get
            {
                return this._siteAdTypeID;
            }
            set
            {
                if ((this._siteAdTypeID != value))
                {
                    this.OnSiteAdTypeIDChanging(value);
                    this.RaiseDataMemberChanging("SiteAdTypeID");
                    this.ValidateProperty("SiteAdTypeID", value);
                    this._siteAdTypeID = value;
                    this.RaiseDataMemberChanged("SiteAdTypeID");
                    this.OnSiteAdTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteTypeName' value.
        /// </summary>
        [DataMember()]
        [StringLength(50)]
        public string SiteTypeName
        {
            get
            {
                return this._siteTypeName;
            }
            set
            {
                if ((this._siteTypeName != value))
                {
                    this.OnSiteTypeNameChanging(value);
                    this.RaiseDataMemberChanging("SiteTypeName");
                    this.ValidateProperty("SiteTypeName", value);
                    this._siteTypeName = value;
                    this.RaiseDataMemberChanged("SiteTypeName");
                    this.OnSiteTypeNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Title' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string Title
        {
            get
            {
                return this._title;
            }
            set
            {
                if ((this._title != value))
                {
                    this.OnTitleChanging(value);
                    this.RaiseDataMemberChanging("Title");
                    this.ValidateProperty("Title", value);
                    this._title = value;
                    this.RaiseDataMemberChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalArea' value.
        /// </summary>
        [DataMember()]
        public double TotalArea
        {
            get
            {
                return this._totalArea;
            }
            set
            {
                if ((this._totalArea != value))
                {
                    this.OnTotalAreaChanging(value);
                    this.RaiseDataMemberChanging("TotalArea");
                    this.ValidateProperty("TotalArea", value);
                    this._totalArea = value;
                    this.RaiseDataMemberChanged("TotalArea");
                    this.OnTotalAreaChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'TotalRooms' value.
        /// </summary>
        [DataMember()]
        public int TotalRooms
        {
            get
            {
                return this._totalRooms;
            }
            set
            {
                if ((this._totalRooms != value))
                {
                    this.OnTotalRoomsChanging(value);
                    this.RaiseDataMemberChanging("TotalRooms");
                    this.ValidateProperty("TotalRooms", value);
                    this._totalRooms = value;
                    this.RaiseDataMemberChanged("TotalRooms");
                    this.OnTotalRoomsChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        public double Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Visible' value.
        /// </summary>
        [DataMember()]
        public bool Visible
        {
            get
            {
                return this._visible;
            }
            set
            {
                if ((this._visible != value))
                {
                    this.OnVisibleChanging(value);
                    this.RaiseDataMemberChanging("Visible");
                    this.ValidateProperty("Visible", value);
                    this._visible = value;
                    this.RaiseDataMemberChanged("Visible");
                    this.OnVisibleChanged();
                }
            }
        }
        
        private void AttachSiteAdDetails(SiteAdDetail entity)
        {
            entity.SiteAd = this;
        }
        
        private void DetachSiteAdDetails(SiteAdDetail entity)
        {
            entity.SiteAd = null;
        }
        
        private bool FilterSiteAdDetails(SiteAdDetail entity)
        {
            return (((entity.SiteAdID == this.SiteAdID) 
                        && (entity.SiteAdTypeID == this.SiteAdTypeID)) 
                        && (entity.CustomerCodename == this.CustomerCodename));
        }
        
        private void AttachSiteAdPics(SiteAdPic entity)
        {
            entity.SiteAd = this;
        }
        
        private void DetachSiteAdPics(SiteAdPic entity)
        {
            entity.SiteAd = null;
        }
        
        private bool FilterSiteAdPics(SiteAdPic entity)
        {
            return (((entity.SiteAdID == this.SiteAdID) 
                        && (entity.SiteAdTypeID == this.SiteAdTypeID)) 
                        && (entity.CustomerCodename == this.CustomerCodename));
        }
        
        private bool FilterSiteAdStatu(SiteAdStatu entity)
        {
            return (entity.SiteAdStatusID == this.SiteAdStatusID);
        }
        
        private bool FilterSiteAdType(SiteAdType entity)
        {
            return (entity.SiteAdTypeID == this.SiteAdTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._customerCodename == null))
            {
                return null;
            }
            return EntityKey.Create(this._customerCodename, this._siteAdID, this._siteAdTypeID);
        }
    }
    
    /// <summary>
    /// The 'SiteAdDetail' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TK1.Bizz.Data")]
    public sealed partial class SiteAdDetail : Entity
    {
        
        private string _customerCodename;
        
        private string _description;
        
        private EntityRef<SiteAd> _siteAd;
        
        private int _siteAdDetailID;
        
        private int _siteAdID;
        
        private int _siteAdTypeID;
        
        private string _type;
        
        private string _value;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomerCodenameChanging(string value);
        partial void OnCustomerCodenameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSiteAdDetailIDChanging(int value);
        partial void OnSiteAdDetailIDChanged();
        partial void OnSiteAdIDChanging(int value);
        partial void OnSiteAdIDChanged();
        partial void OnSiteAdTypeIDChanging(int value);
        partial void OnSiteAdTypeIDChanged();
        partial void OnTypeChanging(string value);
        partial void OnTypeChanged();
        partial void OnValueChanging(string value);
        partial void OnValueChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAdDetail"/> class.
        /// </summary>
        public SiteAdDetail()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerCodename' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string CustomerCodename
        {
            get
            {
                return this._customerCodename;
            }
            set
            {
                if ((this._customerCodename != value))
                {
                    this.OnCustomerCodenameChanging(value);
                    this.RaiseDataMemberChanging("CustomerCodename");
                    this.ValidateProperty("CustomerCodename", value);
                    this._customerCodename = value;
                    this.RaiseDataMemberChanged("CustomerCodename");
                    this.OnCustomerCodenameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SiteAd"/> entity.
        /// </summary>
        [Association("SiteAd_SiteAdDetail", "SiteAdID,SiteAdTypeID,CustomerCodename", "SiteAdID,SiteAdTypeID,CustomerCodename", IsForeignKey=true)]
        [XmlIgnore()]
        public SiteAd SiteAd
        {
            get
            {
                if ((this._siteAd == null))
                {
                    this._siteAd = new EntityRef<SiteAd>(this, "SiteAd", this.FilterSiteAd);
                }
                return this._siteAd.Entity;
            }
            set
            {
                SiteAd previous = this.SiteAd;
                if ((previous != value))
                {
                    this.ValidateProperty("SiteAd", value);
                    if ((previous != null))
                    {
                        this._siteAd.Entity = null;
                        previous.SiteAdDetails.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SiteAdID = value.SiteAdID;
                        this.SiteAdTypeID = value.SiteAdTypeID;
                        this.CustomerCodename = value.CustomerCodename;
                    }
                    else
                    {
                        this.SiteAdID = default(int);
                        this.SiteAdTypeID = default(int);
                        this.CustomerCodename = default(string);
                    }
                    this._siteAd.Entity = value;
                    if ((value != null))
                    {
                        value.SiteAdDetails.Add(this);
                    }
                    this.RaisePropertyChanged("SiteAd");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdDetailID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SiteAdDetailID
        {
            get
            {
                return this._siteAdDetailID;
            }
            set
            {
                if ((this._siteAdDetailID != value))
                {
                    this.OnSiteAdDetailIDChanging(value);
                    this.ValidateProperty("SiteAdDetailID", value);
                    this._siteAdDetailID = value;
                    this.RaisePropertyChanged("SiteAdDetailID");
                    this.OnSiteAdDetailIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SiteAdID
        {
            get
            {
                return this._siteAdID;
            }
            set
            {
                if ((this._siteAdID != value))
                {
                    this.OnSiteAdIDChanging(value);
                    this.RaiseDataMemberChanging("SiteAdID");
                    this.ValidateProperty("SiteAdID", value);
                    this._siteAdID = value;
                    this.RaiseDataMemberChanged("SiteAdID");
                    this.OnSiteAdIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdTypeID' value.
        /// </summary>
        [DataMember()]
        [RoundtripOriginal()]
        public int SiteAdTypeID
        {
            get
            {
                return this._siteAdTypeID;
            }
            set
            {
                if ((this._siteAdTypeID != value))
                {
                    this.OnSiteAdTypeIDChanging(value);
                    this.RaiseDataMemberChanging("SiteAdTypeID");
                    this.ValidateProperty("SiteAdTypeID", value);
                    this._siteAdTypeID = value;
                    this.RaiseDataMemberChanged("SiteAdTypeID");
                    this.OnSiteAdTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Type' value.
        /// </summary>
        [DataMember()]
        [StringLength(255)]
        public string Type
        {
            get
            {
                return this._type;
            }
            set
            {
                if ((this._type != value))
                {
                    this.OnTypeChanging(value);
                    this.RaiseDataMemberChanging("Type");
                    this.ValidateProperty("Type", value);
                    this._type = value;
                    this.RaiseDataMemberChanged("Type");
                    this.OnTypeChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Value' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(255)]
        public string Value
        {
            get
            {
                return this._value;
            }
            set
            {
                if ((this._value != value))
                {
                    this.OnValueChanging(value);
                    this.RaiseDataMemberChanging("Value");
                    this.ValidateProperty("Value", value);
                    this._value = value;
                    this.RaiseDataMemberChanged("Value");
                    this.OnValueChanged();
                }
            }
        }
        
        private bool FilterSiteAd(SiteAd entity)
        {
            return (((entity.SiteAdID == this.SiteAdID) 
                        && (entity.SiteAdTypeID == this.SiteAdTypeID)) 
                        && (entity.CustomerCodename == this.CustomerCodename));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._siteAdDetailID;
        }
    }
    
    /// <summary>
    /// The 'SiteAdIDGenerator' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TK1.Bizz.Data")]
    public sealed partial class SiteAdIDGenerator : Entity
    {
        
        private string _customerCodename;
        
        private int _siteAdID;
        
        private EntityRef<SiteAdType> _siteAdType;
        
        private int _siteAdTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomerCodenameChanging(string value);
        partial void OnCustomerCodenameChanged();
        partial void OnSiteAdIDChanging(int value);
        partial void OnSiteAdIDChanged();
        partial void OnSiteAdTypeIDChanging(int value);
        partial void OnSiteAdTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAdIDGenerator"/> class.
        /// </summary>
        public SiteAdIDGenerator()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerCodename' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string CustomerCodename
        {
            get
            {
                return this._customerCodename;
            }
            set
            {
                if ((this._customerCodename != value))
                {
                    this.OnCustomerCodenameChanging(value);
                    this.RaiseDataMemberChanging("CustomerCodename");
                    this.ValidateProperty("CustomerCodename", value);
                    this._customerCodename = value;
                    this.RaiseDataMemberChanged("CustomerCodename");
                    this.OnCustomerCodenameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdID' value.
        /// </summary>
        [DataMember()]
        public int SiteAdID
        {
            get
            {
                return this._siteAdID;
            }
            set
            {
                if ((this._siteAdID != value))
                {
                    this.OnSiteAdIDChanging(value);
                    this.RaiseDataMemberChanging("SiteAdID");
                    this.ValidateProperty("SiteAdID", value);
                    this._siteAdID = value;
                    this.RaiseDataMemberChanged("SiteAdID");
                    this.OnSiteAdIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SiteAdType"/> entity.
        /// </summary>
        [Association("SiteAdType_SiteAdIDGenerator", "SiteAdTypeID", "SiteAdTypeID", IsForeignKey=true)]
        [XmlIgnore()]
        public SiteAdType SiteAdType
        {
            get
            {
                if ((this._siteAdType == null))
                {
                    this._siteAdType = new EntityRef<SiteAdType>(this, "SiteAdType", this.FilterSiteAdType);
                }
                return this._siteAdType.Entity;
            }
            set
            {
                SiteAdType previous = this.SiteAdType;
                if ((previous != value))
                {
                    this.ValidateProperty("SiteAdType", value);
                    if ((previous != null))
                    {
                        this._siteAdType.Entity = null;
                        previous.SiteAdIDGenerators.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SiteAdTypeID = value.SiteAdTypeID;
                    }
                    else
                    {
                        this.SiteAdTypeID = default(int);
                    }
                    this._siteAdType.Entity = value;
                    if ((value != null))
                    {
                        value.SiteAdIDGenerators.Add(this);
                    }
                    this.RaisePropertyChanged("SiteAdType");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdTypeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int SiteAdTypeID
        {
            get
            {
                return this._siteAdTypeID;
            }
            set
            {
                if ((this._siteAdTypeID != value))
                {
                    this.OnSiteAdTypeIDChanging(value);
                    this.RaiseDataMemberChanging("SiteAdTypeID");
                    this.ValidateProperty("SiteAdTypeID", value);
                    this._siteAdTypeID = value;
                    this.RaiseDataMemberChanged("SiteAdTypeID");
                    this.OnSiteAdTypeIDChanged();
                }
            }
        }
        
        private bool FilterSiteAdType(SiteAdType entity)
        {
            return (entity.SiteAdTypeID == this.SiteAdTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._customerCodename == null))
            {
                return null;
            }
            return EntityKey.Create(this._customerCodename, this._siteAdTypeID);
        }
    }
    
    /// <summary>
    /// The 'SiteAdPic' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TK1.Bizz.Data")]
    public sealed partial class SiteAdPic : Entity
    {
        
        private string _customerCodename;
        
        private string _description;
        
        private string _fileName;
        
        private int _picID;
        
        private string _pictureFilePath;
        
        private string _pictureUrl;
        
        private EntityRef<SiteAd> _siteAd;
        
        private int _siteAdID;
        
        private int _siteAdTypeID;
        
        private string _thumbnailFilePath;
        
        private string _thumbnailUrl;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnCustomerCodenameChanging(string value);
        partial void OnCustomerCodenameChanged();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnFileNameChanging(string value);
        partial void OnFileNameChanged();
        partial void OnPicIDChanging(int value);
        partial void OnPicIDChanged();
        partial void OnPictureFilePathChanging(string value);
        partial void OnPictureFilePathChanged();
        partial void OnPictureUrlChanging(string value);
        partial void OnPictureUrlChanged();
        partial void OnSiteAdIDChanging(int value);
        partial void OnSiteAdIDChanged();
        partial void OnSiteAdTypeIDChanging(int value);
        partial void OnSiteAdTypeIDChanged();
        partial void OnThumbnailFilePathChanging(string value);
        partial void OnThumbnailFilePathChanged();
        partial void OnThumbnailUrlChanging(string value);
        partial void OnThumbnailUrlChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAdPic"/> class.
        /// </summary>
        public SiteAdPic()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'CustomerCodename' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [Required()]
        [RoundtripOriginal()]
        [StringLength(50)]
        public string CustomerCodename
        {
            get
            {
                return this._customerCodename;
            }
            set
            {
                if ((this._customerCodename != value))
                {
                    this.OnCustomerCodenameChanging(value);
                    this.RaiseDataMemberChanging("CustomerCodename");
                    this.ValidateProperty("CustomerCodename", value);
                    this._customerCodename = value;
                    this.RaiseDataMemberChanged("CustomerCodename");
                    this.OnCustomerCodenameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'FileName' value.
        /// </summary>
        [DataMember()]
        [StringLength(256)]
        public string FileName
        {
            get
            {
                return this._fileName;
            }
            set
            {
                if ((this._fileName != value))
                {
                    this.OnFileNameChanging(value);
                    this.RaiseDataMemberChanging("FileName");
                    this.ValidateProperty("FileName", value);
                    this._fileName = value;
                    this.RaiseDataMemberChanged("FileName");
                    this.OnFileNameChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PicID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int PicID
        {
            get
            {
                return this._picID;
            }
            set
            {
                if ((this._picID != value))
                {
                    this.OnPicIDChanging(value);
                    this.RaiseDataMemberChanging("PicID");
                    this.ValidateProperty("PicID", value);
                    this._picID = value;
                    this.RaiseDataMemberChanged("PicID");
                    this.OnPicIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PictureFilePath' value.
        /// </summary>
        [DataMember()]
        public string PictureFilePath
        {
            get
            {
                return this._pictureFilePath;
            }
            set
            {
                if ((this._pictureFilePath != value))
                {
                    this.OnPictureFilePathChanging(value);
                    this.RaiseDataMemberChanging("PictureFilePath");
                    this.ValidateProperty("PictureFilePath", value);
                    this._pictureFilePath = value;
                    this.RaiseDataMemberChanged("PictureFilePath");
                    this.OnPictureFilePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'PictureUrl' value.
        /// </summary>
        [DataMember()]
        public string PictureUrl
        {
            get
            {
                return this._pictureUrl;
            }
            set
            {
                if ((this._pictureUrl != value))
                {
                    this.OnPictureUrlChanging(value);
                    this.RaiseDataMemberChanging("PictureUrl");
                    this.ValidateProperty("PictureUrl", value);
                    this._pictureUrl = value;
                    this.RaiseDataMemberChanged("PictureUrl");
                    this.OnPictureUrlChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the associated <see cref="SiteAd"/> entity.
        /// </summary>
        [Association("SiteAd_SiteAdPic", "SiteAdID,SiteAdTypeID,CustomerCodename", "SiteAdID,SiteAdTypeID,CustomerCodename", IsForeignKey=true)]
        [XmlIgnore()]
        public SiteAd SiteAd
        {
            get
            {
                if ((this._siteAd == null))
                {
                    this._siteAd = new EntityRef<SiteAd>(this, "SiteAd", this.FilterSiteAd);
                }
                return this._siteAd.Entity;
            }
            set
            {
                SiteAd previous = this.SiteAd;
                if ((previous != value))
                {
                    this.ValidateProperty("SiteAd", value);
                    if ((previous != null))
                    {
                        this._siteAd.Entity = null;
                        previous.SiteAdPics.Remove(this);
                    }
                    if ((value != null))
                    {
                        this.SiteAdID = value.SiteAdID;
                        this.SiteAdTypeID = value.SiteAdTypeID;
                        this.CustomerCodename = value.CustomerCodename;
                    }
                    else
                    {
                        this.SiteAdID = default(int);
                        this.SiteAdTypeID = default(int);
                        this.CustomerCodename = default(string);
                    }
                    this._siteAd.Entity = value;
                    if ((value != null))
                    {
                        value.SiteAdPics.Add(this);
                    }
                    this.RaisePropertyChanged("SiteAd");
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int SiteAdID
        {
            get
            {
                return this._siteAdID;
            }
            set
            {
                if ((this._siteAdID != value))
                {
                    this.OnSiteAdIDChanging(value);
                    this.RaiseDataMemberChanging("SiteAdID");
                    this.ValidateProperty("SiteAdID", value);
                    this._siteAdID = value;
                    this.RaiseDataMemberChanged("SiteAdID");
                    this.OnSiteAdIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdTypeID' value.
        /// </summary>
        [DataMember()]
        [Key()]
        [RoundtripOriginal()]
        public int SiteAdTypeID
        {
            get
            {
                return this._siteAdTypeID;
            }
            set
            {
                if ((this._siteAdTypeID != value))
                {
                    this.OnSiteAdTypeIDChanging(value);
                    this.RaiseDataMemberChanging("SiteAdTypeID");
                    this.ValidateProperty("SiteAdTypeID", value);
                    this._siteAdTypeID = value;
                    this.RaiseDataMemberChanged("SiteAdTypeID");
                    this.OnSiteAdTypeIDChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ThumbnailFilePath' value.
        /// </summary>
        [DataMember()]
        public string ThumbnailFilePath
        {
            get
            {
                return this._thumbnailFilePath;
            }
            set
            {
                if ((this._thumbnailFilePath != value))
                {
                    this.OnThumbnailFilePathChanging(value);
                    this.RaiseDataMemberChanging("ThumbnailFilePath");
                    this.ValidateProperty("ThumbnailFilePath", value);
                    this._thumbnailFilePath = value;
                    this.RaiseDataMemberChanged("ThumbnailFilePath");
                    this.OnThumbnailFilePathChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets or sets the 'ThumbnailUrl' value.
        /// </summary>
        [DataMember()]
        public string ThumbnailUrl
        {
            get
            {
                return this._thumbnailUrl;
            }
            set
            {
                if ((this._thumbnailUrl != value))
                {
                    this.OnThumbnailUrlChanging(value);
                    this.RaiseDataMemberChanging("ThumbnailUrl");
                    this.ValidateProperty("ThumbnailUrl", value);
                    this._thumbnailUrl = value;
                    this.RaiseDataMemberChanged("ThumbnailUrl");
                    this.OnThumbnailUrlChanged();
                }
            }
        }
        
        private bool FilterSiteAd(SiteAd entity)
        {
            return (((entity.SiteAdID == this.SiteAdID) 
                        && (entity.SiteAdTypeID == this.SiteAdTypeID)) 
                        && (entity.CustomerCodename == this.CustomerCodename));
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            if ((this._customerCodename == null))
            {
                return null;
            }
            return EntityKey.Create(this._customerCodename, this._picID, this._siteAdID, this._siteAdTypeID);
        }
    }
    
    /// <summary>
    /// The 'SiteAdStatu' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TK1.Bizz.Data")]
    public sealed partial class SiteAdStatu : Entity
    {
        
        private string _description;
        
        private EntityCollection<SiteAd> _siteAds;
        
        private int _siteAdStatusID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSiteAdStatusIDChanging(int value);
        partial void OnSiteAdStatusIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAdStatu"/> class.
        /// </summary>
        public SiteAdStatu()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SiteAd"/> entity instances.
        /// </summary>
        [Association("SiteAdStatu_SiteAd", "SiteAdStatusID", "SiteAdStatusID")]
        [XmlIgnore()]
        public EntityCollection<SiteAd> SiteAds
        {
            get
            {
                if ((this._siteAds == null))
                {
                    this._siteAds = new EntityCollection<SiteAd>(this, "SiteAds", this.FilterSiteAds, this.AttachSiteAds, this.DetachSiteAds);
                }
                return this._siteAds;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdStatusID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SiteAdStatusID
        {
            get
            {
                return this._siteAdStatusID;
            }
            set
            {
                if ((this._siteAdStatusID != value))
                {
                    this.OnSiteAdStatusIDChanging(value);
                    this.ValidateProperty("SiteAdStatusID", value);
                    this._siteAdStatusID = value;
                    this.RaisePropertyChanged("SiteAdStatusID");
                    this.OnSiteAdStatusIDChanged();
                }
            }
        }
        
        private void AttachSiteAds(SiteAd entity)
        {
            entity.SiteAdStatu = this;
        }
        
        private void DetachSiteAds(SiteAd entity)
        {
            entity.SiteAdStatu = null;
        }
        
        private bool FilterSiteAds(SiteAd entity)
        {
            return (entity.SiteAdStatusID == this.SiteAdStatusID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._siteAdStatusID;
        }
    }
    
    /// <summary>
    /// The 'SiteAdType' entity class.
    /// </summary>
    [DataContract(Namespace="http://schemas.datacontract.org/2004/07/TK1.Bizz.Data")]
    public sealed partial class SiteAdType : Entity
    {
        
        private string _description;
        
        private EntityCollection<SiteAdIDGenerator> _siteAdIDGenerators;
        
        private EntityCollection<SiteAd> _siteAds;
        
        private int _siteAdTypeID;
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();
        partial void OnDescriptionChanging(string value);
        partial void OnDescriptionChanged();
        partial void OnSiteAdTypeIDChanging(int value);
        partial void OnSiteAdTypeIDChanged();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="SiteAdType"/> class.
        /// </summary>
        public SiteAdType()
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets or sets the 'Description' value.
        /// </summary>
        [DataMember()]
        [Required()]
        [StringLength(50)]
        public string Description
        {
            get
            {
                return this._description;
            }
            set
            {
                if ((this._description != value))
                {
                    this.OnDescriptionChanging(value);
                    this.RaiseDataMemberChanging("Description");
                    this.ValidateProperty("Description", value);
                    this._description = value;
                    this.RaiseDataMemberChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SiteAdIDGenerator"/> entity instances.
        /// </summary>
        [Association("SiteAdType_SiteAdIDGenerator", "SiteAdTypeID", "SiteAdTypeID")]
        [XmlIgnore()]
        public EntityCollection<SiteAdIDGenerator> SiteAdIDGenerators
        {
            get
            {
                if ((this._siteAdIDGenerators == null))
                {
                    this._siteAdIDGenerators = new EntityCollection<SiteAdIDGenerator>(this, "SiteAdIDGenerators", this.FilterSiteAdIDGenerators, this.AttachSiteAdIDGenerators, this.DetachSiteAdIDGenerators);
                }
                return this._siteAdIDGenerators;
            }
        }
        
        /// <summary>
        /// Gets the collection of associated <see cref="SiteAd"/> entity instances.
        /// </summary>
        [Association("SiteAdType_SiteAd", "SiteAdTypeID", "SiteAdTypeID")]
        [XmlIgnore()]
        public EntityCollection<SiteAd> SiteAds
        {
            get
            {
                if ((this._siteAds == null))
                {
                    this._siteAds = new EntityCollection<SiteAd>(this, "SiteAds", this.FilterSiteAds, this.AttachSiteAds, this.DetachSiteAds);
                }
                return this._siteAds;
            }
        }
        
        /// <summary>
        /// Gets or sets the 'SiteAdTypeID' value.
        /// </summary>
        [DataMember()]
        [Editable(false, AllowInitialValue=true)]
        [Key()]
        [RoundtripOriginal()]
        public int SiteAdTypeID
        {
            get
            {
                return this._siteAdTypeID;
            }
            set
            {
                if ((this._siteAdTypeID != value))
                {
                    this.OnSiteAdTypeIDChanging(value);
                    this.ValidateProperty("SiteAdTypeID", value);
                    this._siteAdTypeID = value;
                    this.RaisePropertyChanged("SiteAdTypeID");
                    this.OnSiteAdTypeIDChanged();
                }
            }
        }
        
        private void AttachSiteAdIDGenerators(SiteAdIDGenerator entity)
        {
            entity.SiteAdType = this;
        }
        
        private void DetachSiteAdIDGenerators(SiteAdIDGenerator entity)
        {
            entity.SiteAdType = null;
        }
        
        private bool FilterSiteAdIDGenerators(SiteAdIDGenerator entity)
        {
            return (entity.SiteAdTypeID == this.SiteAdTypeID);
        }
        
        private void AttachSiteAds(SiteAd entity)
        {
            entity.SiteAdType = this;
        }
        
        private void DetachSiteAds(SiteAd entity)
        {
            entity.SiteAdType = null;
        }
        
        private bool FilterSiteAds(SiteAd entity)
        {
            return (entity.SiteAdTypeID == this.SiteAdTypeID);
        }
        
        /// <summary>
        /// Computes a value from the key fields that uniquely identifies this entity instance.
        /// </summary>
        /// <returns>An object instance that uniquely identifies this entity instance.</returns>
        public override object GetIdentity()
        {
            return this._siteAdTypeID;
        }
    }
}
namespace TK1.Bizz.Data.Presentation
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    
    
    public enum SiteAdTypes
    {
        
        Rent = 1,
        
        Sell = 2,
    }
}
namespace TK1.Silverlight.Data.Web
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.ServiceModel;
    using System.ServiceModel.DomainServices;
    using System.ServiceModel.DomainServices.Client;
    using System.ServiceModel.DomainServices.Client.ApplicationServices;
    using System.ServiceModel.Web;
    using TK1.Bizz.Data;
    using TK1.Bizz.Data.Presentation;
    
    
    /// <summary>
    /// The DomainContext corresponding to the 'BrokerService' DomainService.
    /// </summary>
    public sealed partial class BrokerContext : DomainContext
    {
        
        #region Extensibility Method Definitions

        /// <summary>
        /// This method is invoked from the constructor once initialization is complete and
        /// can be used for further object setup.
        /// </summary>
        partial void OnCreated();

        #endregion
        
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerContext"/> class.
        /// </summary>
        public BrokerContext() : 
                this(new WebDomainClient<IBrokerServiceContract>(new Uri("TK1-Silverlight-Data-Web-BrokerService.svc", UriKind.Relative)))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerContext"/> class with the specified service URI.
        /// </summary>
        /// <param name="serviceUri">The BrokerService service URI.</param>
        public BrokerContext(Uri serviceUri) : 
                this(new WebDomainClient<IBrokerServiceContract>(serviceUri))
        {
        }
        
        /// <summary>
        /// Initializes a new instance of the <see cref="BrokerContext"/> class with the specified <paramref name="domainClient"/>.
        /// </summary>
        /// <param name="domainClient">The DomainClient instance to use for this DomainContext.</param>
        public BrokerContext(DomainClient domainClient) : 
                base(domainClient)
        {
            this.OnCreated();
        }
        
        /// <summary>
        /// Gets the set of <see cref="SiteAd"/> entity instances that have been loaded into this <see cref="BrokerContext"/> instance.
        /// </summary>
        public EntitySet<SiteAd> SiteAds
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SiteAd>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SiteAdDetail"/> entity instances that have been loaded into this <see cref="BrokerContext"/> instance.
        /// </summary>
        public EntitySet<SiteAdDetail> SiteAdDetails
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SiteAdDetail>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SiteAdIDGenerator"/> entity instances that have been loaded into this <see cref="BrokerContext"/> instance.
        /// </summary>
        public EntitySet<SiteAdIDGenerator> SiteAdIDGenerators
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SiteAdIDGenerator>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SiteAdPic"/> entity instances that have been loaded into this <see cref="BrokerContext"/> instance.
        /// </summary>
        public EntitySet<SiteAdPic> SiteAdPics
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SiteAdPic>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SiteAdStatu"/> entity instances that have been loaded into this <see cref="BrokerContext"/> instance.
        /// </summary>
        public EntitySet<SiteAdStatu> SiteAdStatus
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SiteAdStatu>();
            }
        }
        
        /// <summary>
        /// Gets the set of <see cref="SiteAdType"/> entity instances that have been loaded into this <see cref="BrokerContext"/> instance.
        /// </summary>
        public EntitySet<SiteAdType> SiteAdTypes
        {
            get
            {
                return base.EntityContainer.GetEntitySet<SiteAdType>();
            }
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SiteAd"/> entity instances using the 'GetCustomerSiteAds' query.
        /// </summary>
        /// <param name="customerCodename">The value for the 'customerCodename' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SiteAd"/> entity instances.</returns>
        public EntityQuery<SiteAd> GetCustomerSiteAdsQuery(string customerCodename)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("customerCodename", customerCodename);
            this.ValidateMethod("GetCustomerSiteAdsQuery", parameters);
            return base.CreateQuery<SiteAd>("GetCustomerSiteAds", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SiteAdDetail"/> entity instances using the 'GetSiteAdDetails' query.
        /// </summary>
        /// <param name="customerCodename">The value for the 'customerCodename' parameter of the query.</param>
        /// <param name="adType">The value for the 'adType' parameter of the query.</param>
        /// <param name="siteAdID">The value for the 'siteAdID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SiteAdDetail"/> entity instances.</returns>
        public EntityQuery<SiteAdDetail> GetSiteAdDetailsQuery(string customerCodename, SiteAdTypes adType, int siteAdID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("customerCodename", customerCodename);
            parameters.Add("adType", adType);
            parameters.Add("siteAdID", siteAdID);
            this.ValidateMethod("GetSiteAdDetailsQuery", parameters);
            return base.CreateQuery<SiteAdDetail>("GetSiteAdDetails", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SiteAdIDGenerator"/> entity instances using the 'GetSiteAdIDGenerators' query.
        /// </summary>
        /// <param name="customerCodename">The value for the 'customerCodename' parameter of the query.</param>
        /// <param name="adType">The value for the 'adType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SiteAdIDGenerator"/> entity instances.</returns>
        public EntityQuery<SiteAdIDGenerator> GetSiteAdIDGeneratorsQuery(string customerCodename, SiteAdTypes adType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("customerCodename", customerCodename);
            parameters.Add("adType", adType);
            this.ValidateMethod("GetSiteAdIDGeneratorsQuery", parameters);
            return base.CreateQuery<SiteAdIDGenerator>("GetSiteAdIDGenerators", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SiteAdPic"/> entity instances using the 'GetSiteAdPics' query.
        /// </summary>
        /// <param name="customerCodename">The value for the 'customerCodename' parameter of the query.</param>
        /// <param name="adType">The value for the 'adType' parameter of the query.</param>
        /// <param name="siteAdID">The value for the 'siteAdID' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SiteAdPic"/> entity instances.</returns>
        public EntityQuery<SiteAdPic> GetSiteAdPicsQuery(string customerCodename, SiteAdTypes adType, int siteAdID)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("customerCodename", customerCodename);
            parameters.Add("adType", adType);
            parameters.Add("siteAdID", siteAdID);
            this.ValidateMethod("GetSiteAdPicsQuery", parameters);
            return base.CreateQuery<SiteAdPic>("GetSiteAdPics", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SiteAd"/> entity instances using the 'GetSiteAds' query.
        /// </summary>
        /// <param name="customerCodename">The value for the 'customerCodename' parameter of the query.</param>
        /// <param name="adType">The value for the 'adType' parameter of the query.</param>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SiteAd"/> entity instances.</returns>
        public EntityQuery<SiteAd> GetSiteAdsQuery(string customerCodename, SiteAdTypes adType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("customerCodename", customerCodename);
            parameters.Add("adType", adType);
            this.ValidateMethod("GetSiteAdsQuery", parameters);
            return base.CreateQuery<SiteAd>("GetSiteAds", parameters, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SiteAdStatu"/> entity instances using the 'GetSiteAdStatus' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SiteAdStatu"/> entity instances.</returns>
        public EntityQuery<SiteAdStatu> GetSiteAdStatusQuery()
        {
            this.ValidateMethod("GetSiteAdStatusQuery", null);
            return base.CreateQuery<SiteAdStatu>("GetSiteAdStatus", null, false, true);
        }
        
        /// <summary>
        /// Gets an EntityQuery instance that can be used to load <see cref="SiteAdType"/> entity instances using the 'GetSiteAdTypes' query.
        /// </summary>
        /// <returns>An EntityQuery that can be loaded to retrieve <see cref="SiteAdType"/> entity instances.</returns>
        public EntityQuery<SiteAdType> GetSiteAdTypesQuery()
        {
            this.ValidateMethod("GetSiteAdTypesQuery", null);
            return base.CreateQuery<SiteAdType>("GetSiteAdTypes", null, false, true);
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateSiteAdID' method of the DomainService.
        /// </summary>
        /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
        /// <param name="adType">The value for the 'adType' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GenerateSiteAdID(string customerCodename, SiteAdTypes adType, Action<InvokeOperation<int>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("customerCodename", customerCodename);
            parameters.Add("adType", adType);
            this.ValidateMethod("GenerateSiteAdID", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("GenerateSiteAdID", typeof(int), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'GenerateSiteAdID' method of the DomainService.
        /// </summary>
        /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
        /// <param name="adType">The value for the 'adType' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<int> GenerateSiteAdID(string customerCodename, SiteAdTypes adType)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("customerCodename", customerCodename);
            parameters.Add("adType", adType);
            this.ValidateMethod("GenerateSiteAdID", parameters);
            return ((InvokeOperation<int>)(this.InvokeOperation("GenerateSiteAdID", typeof(int), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RemoveSiteAdPic' method of the DomainService.
        /// </summary>
        /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
        /// <param name="adType">The value for the 'adType' parameter of this action.</param>
        /// <param name="siteAdID">The value for the 'siteAdID' parameter of this action.</param>
        /// <param name="index">The value for the 'index' parameter of this action.</param>
        /// <param name="callback">Callback to invoke when the operation completes.</param>
        /// <param name="userState">Value to pass to the callback.  It can be <c>null</c>.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> RemoveSiteAdPic(string customerCodename, SiteAdTypes adType, int siteAdID, int index, Action<InvokeOperation<bool>> callback, object userState)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("customerCodename", customerCodename);
            parameters.Add("adType", adType);
            parameters.Add("siteAdID", siteAdID);
            parameters.Add("index", index);
            this.ValidateMethod("RemoveSiteAdPic", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("RemoveSiteAdPic", typeof(bool), parameters, true, callback, userState)));
        }
        
        /// <summary>
        /// Asynchronously invokes the 'RemoveSiteAdPic' method of the DomainService.
        /// </summary>
        /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
        /// <param name="adType">The value for the 'adType' parameter of this action.</param>
        /// <param name="siteAdID">The value for the 'siteAdID' parameter of this action.</param>
        /// <param name="index">The value for the 'index' parameter of this action.</param>
        /// <returns>An operation instance that can be used to manage the asynchronous request.</returns>
        public InvokeOperation<bool> RemoveSiteAdPic(string customerCodename, SiteAdTypes adType, int siteAdID, int index)
        {
            Dictionary<string, object> parameters = new Dictionary<string, object>();
            parameters.Add("customerCodename", customerCodename);
            parameters.Add("adType", adType);
            parameters.Add("siteAdID", siteAdID);
            parameters.Add("index", index);
            this.ValidateMethod("RemoveSiteAdPic", parameters);
            return ((InvokeOperation<bool>)(this.InvokeOperation("RemoveSiteAdPic", typeof(bool), parameters, true, null, null)));
        }
        
        /// <summary>
        /// Creates a new EntityContainer for this DomainContext's EntitySets.
        /// </summary>
        /// <returns>A new container instance.</returns>
        protected override EntityContainer CreateEntityContainer()
        {
            return new BrokerContextEntityContainer();
        }
        
        /// <summary>
        /// Service contract for the 'BrokerService' DomainService.
        /// </summary>
        [ServiceContract()]
        public interface IBrokerServiceContract
        {
            
            /// <summary>
            /// Asynchronously invokes the 'GenerateSiteAdID' operation.
            /// </summary>
            /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
            /// <param name="adType">The value for the 'adType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BrokerService/GenerateSiteAdIDDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BrokerService/GenerateSiteAdID", ReplyAction="http://tempuri.org/BrokerService/GenerateSiteAdIDResponse")]
            IAsyncResult BeginGenerateSiteAdID(string customerCodename, SiteAdTypes adType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGenerateSiteAdID'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGenerateSiteAdID'.</param>
            /// <returns>The 'Int32' returned from the 'GenerateSiteAdID' operation.</returns>
            int EndGenerateSiteAdID(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetCustomerSiteAds' operation.
            /// </summary>
            /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BrokerService/GetCustomerSiteAdsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BrokerService/GetCustomerSiteAds", ReplyAction="http://tempuri.org/BrokerService/GetCustomerSiteAdsResponse")]
            [WebGet()]
            IAsyncResult BeginGetCustomerSiteAds(string customerCodename, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetCustomerSiteAds'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetCustomerSiteAds'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetCustomerSiteAds' operation.</returns>
            QueryResult<SiteAd> EndGetCustomerSiteAds(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSiteAdDetails' operation.
            /// </summary>
            /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
            /// <param name="adType">The value for the 'adType' parameter of this action.</param>
            /// <param name="siteAdID">The value for the 'siteAdID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BrokerService/GetSiteAdDetailsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BrokerService/GetSiteAdDetails", ReplyAction="http://tempuri.org/BrokerService/GetSiteAdDetailsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSiteAdDetails(string customerCodename, SiteAdTypes adType, int siteAdID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSiteAdDetails'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSiteAdDetails'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSiteAdDetails' operation.</returns>
            QueryResult<SiteAdDetail> EndGetSiteAdDetails(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSiteAdIDGenerators' operation.
            /// </summary>
            /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
            /// <param name="adType">The value for the 'adType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BrokerService/GetSiteAdIDGeneratorsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BrokerService/GetSiteAdIDGenerators", ReplyAction="http://tempuri.org/BrokerService/GetSiteAdIDGeneratorsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSiteAdIDGenerators(string customerCodename, SiteAdTypes adType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSiteAdIDGenerators'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSiteAdIDGenerators'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSiteAdIDGenerators' operation.</returns>
            QueryResult<SiteAdIDGenerator> EndGetSiteAdIDGenerators(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSiteAdPics' operation.
            /// </summary>
            /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
            /// <param name="adType">The value for the 'adType' parameter of this action.</param>
            /// <param name="siteAdID">The value for the 'siteAdID' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BrokerService/GetSiteAdPicsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BrokerService/GetSiteAdPics", ReplyAction="http://tempuri.org/BrokerService/GetSiteAdPicsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSiteAdPics(string customerCodename, SiteAdTypes adType, int siteAdID, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSiteAdPics'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSiteAdPics'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSiteAdPics' operation.</returns>
            QueryResult<SiteAdPic> EndGetSiteAdPics(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSiteAds' operation.
            /// </summary>
            /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
            /// <param name="adType">The value for the 'adType' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BrokerService/GetSiteAdsDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BrokerService/GetSiteAds", ReplyAction="http://tempuri.org/BrokerService/GetSiteAdsResponse")]
            [WebGet()]
            IAsyncResult BeginGetSiteAds(string customerCodename, SiteAdTypes adType, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSiteAds'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSiteAds'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSiteAds' operation.</returns>
            QueryResult<SiteAd> EndGetSiteAds(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSiteAdStatus' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BrokerService/GetSiteAdStatusDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BrokerService/GetSiteAdStatus", ReplyAction="http://tempuri.org/BrokerService/GetSiteAdStatusResponse")]
            [WebGet()]
            IAsyncResult BeginGetSiteAdStatus(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSiteAdStatus'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSiteAdStatus'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSiteAdStatus' operation.</returns>
            QueryResult<SiteAdStatu> EndGetSiteAdStatus(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'GetSiteAdTypes' operation.
            /// </summary>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BrokerService/GetSiteAdTypesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BrokerService/GetSiteAdTypes", ReplyAction="http://tempuri.org/BrokerService/GetSiteAdTypesResponse")]
            [WebGet()]
            IAsyncResult BeginGetSiteAdTypes(AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginGetSiteAdTypes'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginGetSiteAdTypes'.</param>
            /// <returns>The 'QueryResult' returned from the 'GetSiteAdTypes' operation.</returns>
            QueryResult<SiteAdType> EndGetSiteAdTypes(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'RemoveSiteAdPic' operation.
            /// </summary>
            /// <param name="customerCodename">The value for the 'customerCodename' parameter of this action.</param>
            /// <param name="adType">The value for the 'adType' parameter of this action.</param>
            /// <param name="siteAdID">The value for the 'siteAdID' parameter of this action.</param>
            /// <param name="index">The value for the 'index' parameter of this action.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BrokerService/RemoveSiteAdPicDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BrokerService/RemoveSiteAdPic", ReplyAction="http://tempuri.org/BrokerService/RemoveSiteAdPicResponse")]
            IAsyncResult BeginRemoveSiteAdPic(string customerCodename, SiteAdTypes adType, int siteAdID, int index, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginRemoveSiteAdPic'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginRemoveSiteAdPic'.</param>
            /// <returns>The 'Boolean' returned from the 'RemoveSiteAdPic' operation.</returns>
            bool EndRemoveSiteAdPic(IAsyncResult result);
            
            /// <summary>
            /// Asynchronously invokes the 'SubmitChanges' operation.
            /// </summary>
            /// <param name="changeSet">The change-set to submit.</param>
            /// <param name="callback">Callback to invoke on completion.</param>
            /// <param name="asyncState">Optional state object.</param>
            /// <returns>An IAsyncResult that can be used to monitor the request.</returns>
            [FaultContract(typeof(DomainServiceFault), Action="http://tempuri.org/BrokerService/SubmitChangesDomainServiceFault", Name="DomainServiceFault", Namespace="DomainServices")]
            [OperationContract(AsyncPattern=true, Action="http://tempuri.org/BrokerService/SubmitChanges", ReplyAction="http://tempuri.org/BrokerService/SubmitChangesResponse")]
            IAsyncResult BeginSubmitChanges(IEnumerable<ChangeSetEntry> changeSet, AsyncCallback callback, object asyncState);
            
            /// <summary>
            /// Completes the asynchronous operation begun by 'BeginSubmitChanges'.
            /// </summary>
            /// <param name="result">The IAsyncResult returned from 'BeginSubmitChanges'.</param>
            /// <returns>The collection of change-set entry elements returned from 'SubmitChanges'.</returns>
            IEnumerable<ChangeSetEntry> EndSubmitChanges(IAsyncResult result);
        }
        
        internal sealed class BrokerContextEntityContainer : EntityContainer
        {
            
            public BrokerContextEntityContainer()
            {
                this.CreateEntitySet<SiteAd>(EntitySetOperations.All);
                this.CreateEntitySet<SiteAdDetail>(EntitySetOperations.All);
                this.CreateEntitySet<SiteAdIDGenerator>(EntitySetOperations.All);
                this.CreateEntitySet<SiteAdPic>(EntitySetOperations.All);
                this.CreateEntitySet<SiteAdStatu>(EntitySetOperations.None);
                this.CreateEntitySet<SiteAdType>(EntitySetOperations.None);
            }
        }
    }
}
